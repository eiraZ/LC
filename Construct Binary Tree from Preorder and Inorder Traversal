/*
Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

Solution: Recursion
*/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 public TreeNode buildTree(int[] preorder, int[] inorder) {
    if (preorder == null||inorder == null || preorder.length == 0 || preorder.length != inorder.length) return null;
    return helper(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1);
 }
 private TreeNode helper(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd){
    if (preStart >preEnd || inStart > inEnd) return null;
    if (preStart == preEnd || inStart == inEnd) return new TreeNode(preorder[preStart]);
    
    int indexR = -1;
    for (int i =0; i<inorder.length; i++){
        if (inorder[i] == preorder[preStart]){
            indexR = i;
            break;
        }
    }
    
    int leftLength = indexR - inStart;
    TreeNode root = new TreeNode(preorder[preStart]);
    root.left = helper(preorder, preStart+1, preStart + leftLength, inorder, inStart, indexR - 1);
    root.right = helper(preorder, preStart + leftLength + 1, preEnd, inorder, indexR + 1, inEnd);
    return root;
    
 }
