/*
Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

Solution: runner-walker pointer
*/
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
  public boolean hasCycle(ListNode head) {
      if ( head == null ) return false;
      
      ListNode runner = head;
      ListNode walker = head;
      
      while ( runner!=null && runner.next!=null){
          runner = runner.next.next;
          walker = walker.next;
          if (runner == walker){
              return true;
          }
      }
      
      return false;
  }
