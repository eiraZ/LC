/*
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? 
Find all unique quadruplets in the array which gives the sum of target.

Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)
    
    Solution: sort, 2 pointers. O(n^3)
*/
public List<List<Integer>> fourSum(int[] num, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(num.length<4){
            return res;
        }
        Arrays.sort(num);
        /* if: remove duplicates;
            or: at the end, apply while
        */
        for (int i=0; i<num.length-3; i++){
            if (i>0 && num[i] == num[i-1]){
                continue;
            }
            for (int j = i+1; j<num.length-2; j++){
                if (j>i+1 && num[j] == num[j-1]) continue;
                int left = j+1;
                int right = num.length -1;
                while(left<right){
                    int temp = num[i] + num[j] + num[left] + num[right];
                    if (temp==target){
                        List<Integer> ele = new ArrayList<Integer>();
                        ele.add(num[i]);
                        ele.add(num[j]);
                        ele.add(num[left]);
                        ele.add(num[right]);
                        res.add(ele);
                        
                        left++;
                        right--;
                        while (left<right && num[left-1]==num[left]) left++;
                        while (left<right && num[right+1] ==num[right]) right--;
                        
                    }else if(temp<target){
                        left++;
                    }else{
                        right--;
                    }
                }
            }
        }
        return res;
    }
