/*
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

You may assume no duplicate exists in the array.

Solution: binary search, find the monotonic increasing sequences and compare.
          O(logn)
*/
public int findMin(int[] num) {
        if (num ==null || num.length == 0){
            return Integer.MIN_VALUE;
        }
        int min = num[0];
        int left = 0;
        int right = num.length - 1;
        
        while (left <= right){
            int mid = (left + right) / 2;
            if (num[left] <= num[mid]){  //left ->mid asc; =  if left ==right, mid ==left
                min = Math.min(min, num[left]);
                left = mid + 1;
            }else{
                //mid -> right asc
                min = Math.min(min, num[mid]);
                right = mid - 1;
            }
        }
        return min;
      
    }
