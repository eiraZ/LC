/*
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

Solution: implement a comparator interface
          sort 
          merge
*/

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
 
 public List<Interval> merge(List<Interval> intervals) {
    if(intervals == null || intervals.size() == 0 ) return intervals;
    
    List<Interval> res = new ArrayList<Interval>();
    
    Comparator<Interval> cmp = new Comparator<Interval>(){
        public int compare(Interval in1, Interval in2){
            if(in1.start == in2.start){
                return in1.end - in2.end;
            }
            return in1.start - in2.start;
        }
    };
    Collections.sort(intervals, cmp);
    res.add(intervals.get(0));
    
    for(int i = 1; i<intervals.size(); i++){
        Interval cur = intervals.get(i);
        if (res.get(res.size()-1).end >= cur.start){
            res.get(res.size()-1).end = Math.max(res.get(res.size()-1).end, cur.end);
        }else{
            res.add(cur);
        }
    }
    
    return res;
 }
