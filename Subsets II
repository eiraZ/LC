/*
Given a collection of integers that might contain duplicates, S, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If S = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
Solution: DFS or iteration
*/
public List<List<Integer>> subsetsWithDup_DFS(int[] num) {
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    if (num.length == 0) return res;
    Arrays.sort(num);
    
    List<Integer> ele = new ArrayList<Integer>();
    helper(res, ele, num, 0);
    return res;
    
}

private void helper(List<List<Integer>> res, List<Integer> ele, int[] num, int start){
    List<Integer> temp = new ArrayList<Integer>(ele);
    res.add(temp);
    for (int i = start; i < num.length; i++){
        ele.add(S[i]);
        helper(res, ele, num, i+1);
        ele.remove(ele.size()-1);
        while ( i< num.length -1 && S[i] == S[i+1]){
            i++;
        }
    }
}

public List<List<Integer>> subsetsWithDup_iteration(int[] num) {
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    if (num.length == 0) return res;
    Arrays.sort(num);
    
    res.add(new ArrayList<Integer>());
    
    int pre_du = 0;
    for (int i = 0; i<num.length; i++){
        int size = res.size();
        for (int j = pre_du; j<size; j++){
            List<Integer> temp = new ArrayList<Integer>(res.get(j));
            temp.add(S[j]);
            res.add(temp);
        }
        if ( i< num.length-1 && S[i] == S[i+1]){
            pre_du = size;
        }else{
            pre_du = 0;
        }
    }
    return res;
}
