/*
Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
  
  Solution: stack for numbers.
*/
public int evalRPN(String[] tokens) {
    if (tokens.length == 0 ){
        return 0;
    }
    LinkedList<Integer> stack = new LinkedList<Integer>();
    
    for (int i = 0; i < tokens.length; i++){
        if (!tokens[i].equals("+") && !tokens[i].equals("-") && !tokens[i].equals("*") && !tokens[i].equals("/")){
            stack.push(Integer.parseInt(tokens[i]));
        }else{
            if(stack.size() < 2){
                return 0;
            }
            int num1 = stack.pop();
            int num2 = stack.pop();
            int temp = 0;
            if (tokens[i].equals("+")){
                temp = num1 + num2;
            }else if(tokens[i].equals("-")){
                temp = num2 - num1;
            }else if(tokens[i].equals("*")){
                temp = num2 * num1;
            }else{
                temp = num2 / num1;
            }
            stack.push(temp);
        }
    }
    return stack.pop();
}
