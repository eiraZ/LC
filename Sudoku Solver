/*
Write a program to solve a Sudoku puzzle by filling the empty cells.

Empty cells are indicated by the character '.'.

You may assume that there will be only one unique solution.

Solution: we must have a return value to make sure we get the solution.
          solve a problem by order. row by row. 
*/

public void solveSudoku(char[][] board) {
    if (board.length != 9 || board.length != board[0].length) return;
    
    helper(board, 0, 0);
}
private boolean helper(char[][] board, int row, int col){
    if (col >= 9){
      return helper(board, row+1, 0);
    }
    if(row == 9) return true;
    
    if(board[row][col] == '.' ){
        for (char c = '1'; c<='9'; c++){
            if (isValid(board, row, col, c)){
                board[row][col] = c;
                if(helper(board, row, col+1)){
                    return true;
                }
                board[row][col] = '.';
            }
        }  
    }
    else{
        return helper(board, row, col+1);
    }
    return false;
   
}
private boolean isValid(char[][] board, int row, int col, char c){
    //check row
    for (int c = 0; c < 9; c++){
        if (board[row][c] == c){
            return false;
        }
    }
    //check column
    for (int r = 0; r < 9; r++){
        if (board[r][col] == c){
            return false;
        }
    }
    //check box
    for (int i = row/3 * 3; i < row/3 * 3 + 3; i++){
        for (int j = col/3 * 3; j<col/3 * 3 + 3; j++){
            if (board[i][j] == c){
                return false;
            }
        }
    }
    return true;
}
