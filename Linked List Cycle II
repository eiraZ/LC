/*
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Follow up:
Can you solve it without using extra space?

Solution: runner-walker: contains a cycle or not.
          k step
*/
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
   public ListNode detectCycle(ListNode head) {
      if(head==null){
          return null;
      }
      ListNode runner = head;
      ListNode walker = head;
      while (runner != null && runner.next !=null){
          runner = runner.next.next;
          walker = walker.next;
          if (runner == walker){
              break;
          }
      }
      if (runner == null || runner.next == null) return null;     //no cycle
      
      walker = head;
      while (walker != runner){
          walker = walker.next;
          runner = runner.next;
      }
      return walker;
  }
