/*
Given a collection of candidate numbers (C) and a target number (T), 
find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
A solution set is: 
[1, 7] 
[1, 2, 5] 
[2, 6] 
[1, 1, 6] 

solution: DFS
*/
public List<List<Integer>> combinationSum2(int[] num, int target) {
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    if (num.length == 0 ) return res;
    Arrays.sort(num);
    List<Integer> ele = new ArrayList<Integer>();
    helper(res, ele, num, target, 0);
    return res;
}

private void helper(List<List<Integer>> res, List<Integer> ele, int[] num, int target, int start){
    if (target == 0){
        res.add(new ArrayList<Integer>(ele));
        return;
    }
    for (int i = start; i<num.length && target >= num[i]; i++){
        ele.add(num[i]);
        helper(res, ele, num, target- num[i], i+1);
        ele.remove(ele.size()-1);
        while ( i < num.length-1 && num[i] == num[i+1]){
            i++;
        }
    }
}
