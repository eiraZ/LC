/*
Given a binary tree, return the zigzag level order traversal of its nodes' values. 
(ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
*/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public List<List<Integer>> zigzagLevelOrder_pre(TreeNode root) {
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    if ( root == null ) return res;
    List<Integer> sub = new ArrayList<Integer>();
    sub.add(root.val);
    res.add(sub);
    
    Stack<TreeNode> pre = new Stack<TreeNode>();
    pre.push(root);
    int level = 0;
    level++;
    
    while ( !pre.empty()){
        List<Integer> ele = new ArrayList<Integer>();
        Stack<TreeNode> cur = new Stack<TreeNode>();
        
        while (!pre.empty()){
            TreeNode node = pre.pop();
            if (level % 2 == 1){
                if (node.right!=null){
                    cur.push(node.right);
                    ele.add(node.right.val);
                }
                if (node.left != null) {
                    cur.push(node.left);
                    ele.add(node.left.val);
                }
            }else{
                if (node.left != null){
                    cur.push(node.left);
                    ele.add(node.left.val);
                }
                if (node.right != null){
                    cur.push(node.right);
                    ele.add(node.right.val);
                }
            }
        }
        if (ele.size()> 0){
            res.add(ele);
        }
        pre = cur;
        level++;
    }
    return res;
}

public List<List<Integer>> zigzagLevelOrder_current(TreeNode root) {
        
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(root == null){
            return res;
        }
        List<Integer> ele = new ArrayList<Integer>();
        int level = 0;
        // level order, root at level 0. Collections.reverse(list) when level is an odd
        //(1)2 stacks
        //(2) odd level: reverse
        
        LinkedList<TreeNode> prestack = new LinkedList<TreeNode>();
        LinkedList<TreeNode> curstack = new LinkedList<TreeNode>();
        prestack.push(root);
        //TreeNode cur = root;
        
        while (prestack.size() > 0){
            TreeNode cur = prestack.pop();
            ele.add(cur.val);
            if (level%2 == 0){
                if (cur.left != null){
                    curstack.push(cur.left);
                }
                if (cur.right !=null){
                    curstack.push(cur.right);
                }
            }else{
                if (cur.right != null){
                    curstack.push(cur.right);
                }
                if (cur.left!=null){
                    curstack.push(cur.left);
                }
            }
            if (prestack.size() ==0 ){
                prestack = curstack;
                curstack = new LinkedList<TreeNode>();
                res.add(new ArrayList<Integer>(ele));
                ele.clear();
                level++;
            }
        }
        return res;
        
    }
