/*
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.

Solution: DP
*/
public int uniquePathsWithObstacles(int[][] obstacleGrid) {
    if(obstacleGrid.length == 0 || obstacleGrid[0].length == 0) return 0;
    int[] res = new int[obstacleGrid[0].length];
    
    for (int j = 0; j<obstacleGrid[0].length; j++){
        if(obstacleGrid[0][j]!=1){
            res[j] = 1;
        }else break;
    }
    for (int i = 1; i <obstacleGrid.length; i++){
    /*
        if(obstacleGrid[i][0] == 1){
            res[0] = 0;
        }
        */
        res[0] = (obstacleGrid[i][0] == 1)? 0: res[0];
        for (int j =1 ; j< obstacleGrid[0].length; j++){
        /*
            if (obstacleGrid[i][j] == 1){
                res[j] = 0;
            }else{
                res[j] = res[j-1]+res[j];
            }
            */
            res[j] = (obstacleGrid[i][j] == 1)? 0: (res[j-1]+res[j]);
        }
    }
    return res[obstacleGrid[0].length-1];
}
