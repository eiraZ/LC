/*
Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. 
Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
    
    Solution: 2 pointers. sort array, then fix, use 2 pointers, one for start, the other for the end. Time: O(n^2)
    
*/
public int threeSumClosest(int[] num, int target) {
    if (num.length < 3) return 0;
    Arrays.sort(num);
    
    int diff = Integer.MAX_VALUE;
    int res = 0;
    for (int i = 0; i< num.length - 2; i++){
        int left = i + 1;
        int right = num.length - 1;
        while (left < right){
            int temp = num[i] + num[left] + num[right];
            int curdif = Math.abs(temp - target);
            if (curdif < diff){
                diff = curdif;
                res = temp;
            }
            if (temp == target){
                return temp;
            }else if (temp < target){
                left++;
            }else{
                right--;
            }
        }
    }
    return res;
}
